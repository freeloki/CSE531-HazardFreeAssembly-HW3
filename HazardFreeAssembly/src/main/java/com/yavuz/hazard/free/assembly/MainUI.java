/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.yavuz.hazard.free.assembly;

import static com.yavuz.hazard.free.assembly.Hazard.CH;
import static com.yavuz.hazard.free.assembly.Hazard.DH;
import static com.yavuz.hazard.free.assembly.InstructionSyntax.ArithLog;
import static com.yavuz.hazard.free.assembly.InstructionSyntax.ArithLogI;
import static com.yavuz.hazard.free.assembly.InstructionSyntax.Branch;
import static com.yavuz.hazard.free.assembly.InstructionSyntax.LoadStore;
import static com.yavuz.hazard.free.assembly.InstructionType.NOP;
import java.util.ArrayList;

/**
 *
 * @author codemania
 */
public class MainUI extends javax.swing.JFrame {

    private String inputString;
    private ArrayList<String> mAssemblyLines = new ArrayList();
    private ArrayList<Node> mNodeList = new ArrayList();

    private ArrayList<Dependency> mDependencylist = new ArrayList<>();

    private String outputString;

    /**
     * Creates new form MainUI
     */
    public MainUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        mOutputText = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        ParseInput = new javax.swing.JButton();
        runBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        mAssemblyInputText = new javax.swing.JTextArea();
        outputLabel = new javax.swing.JLabel();
        mClearBtn = new javax.swing.JButton();
        solveBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CSE531 - Hazard Free Assembly");
        setLocation(new java.awt.Point(200, 100));

        mOutputText.setColumns(20);
        mOutputText.setRows(5);
        jScrollPane1.setViewportView(mOutputText);

        jLabel1.setFont(new java.awt.Font("Noto Sans", 1, 12)); // NOI18N
        jLabel1.setText("Copy&Paste Assembly Code Here:");

        ParseInput.setText("Parse Input");
        ParseInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ParseInputActionPerformed(evt);
            }
        });

        runBtn.setText("Find Dependency");
        runBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runBtnActionPerformed(evt);
            }
        });

        mAssemblyInputText.setColumns(20);
        mAssemblyInputText.setRows(5);
        jScrollPane2.setViewportView(mAssemblyInputText);

        outputLabel.setFont(new java.awt.Font("Noto Sans", 1, 12)); // NOI18N
        outputLabel.setText("Result:");

        mClearBtn.setText("Clear");
        mClearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mClearBtnActionPerformed(evt);
            }
        });

        solveBtn.setText("Solve Dependencies");
        solveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solveBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 476, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ParseInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(runBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(solveBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(mClearBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(outputLabel)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 476, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(outputLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ParseInput)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(runBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(solveBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mClearBtn))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap(108, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ParseInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ParseInputActionPerformed
        // TODO add your handling code here:

        if (mAssemblyInputText != null && !mAssemblyInputText.getText().isEmpty()) {

            inputString = mAssemblyInputText.getText();

            String[] mSplitArray = inputString.split("\n");

            for (int i = 0; i < mSplitArray.length; i++) {

                mAssemblyLines.add(reduceBlanksToOne(mSplitArray[i]));
                System.out.println("LINE[" + i + "]: " + reduceBlanksToOne(mSplitArray[i]));
            }

            // parse lines.
            for (String line : mAssemblyLines) {

                int index = mAssemblyLines.indexOf(line);

                String[] lineArray = line.split(" ");

                if (lineArray.length > 0) {

                    // check label first!!
                    String label = "";
                    if (lineArray[0].contains(":")) {
                        label = lineArray[0];

                        InstructionType type = InstructionType.getTypeByName(lineArray[1]);
                        // Instruction mInstruction = InstructionType.
                        // -> rd, rs, rt
                        switch (type.getSyntax()) {
                            case ArithLog: {
                                String rd = lineArray[2].replaceAll(",", "");
                                String rs = lineArray[3].replaceAll(",", "");
                                String rt = lineArray[4].replaceAll(",", "");
                                Instruction ins = new Instruction(type, rd, rs, rt);
                                mNodeList.add(new Node(label, ins, index));
                                break;
                            }
                            case ArithLogI: {
                                // rt, rs, imm
                                String rt = lineArray[2].replaceAll(",", "");
                                String rs = lineArray[3].replaceAll(",", "");
                                Instruction ins = new Instruction(type, null, rs, rt);
                                mNodeList.add(new Node(label, ins, index));
                                break;
                            }
                            case LoadStore: {
                                // rt, imm(rs)
                                String rt = lineArray[2].replaceAll(",", "");
                                String rs = lineArray[3];
                                rs = rs.substring(rs.indexOf("("));
                                rs = rs.replaceAll("[)]", "");
                                Instruction ins = new Instruction(type, null, rs, rt);
                                mNodeList.add(new Node(label, ins, index));
                                break;
                            }
                            case Branch: {
                                // rs, rt, label
                                String rs = lineArray[2].replaceAll(",", "");
                                String rt = lineArray[3].replaceAll(",", "");
                                Instruction ins = new Instruction(type, null, rs, rt);
                                mNodeList.add(new Node(label, ins, index));
                                break;
                            }
                            default:
                                break;
                        }

                    } else {
                        InstructionType type = InstructionType.getTypeByName(lineArray[0]);
                        // Instruction mInstruction = InstructionType.
                        // -> rd, rs, rt
                        switch (type.getSyntax()) {
                            case ArithLog: {
                                String rd = lineArray[1].replaceAll(",", "");
                                String rs = lineArray[2].replaceAll(",", "");
                                String rt = lineArray[3].replaceAll(",", "");
                                Instruction ins = new Instruction(type, rd, rs, rt);
                                mNodeList.add(new Node(label, ins, index));
                                break;
                            }
                            case ArithLogI: {
                                // rt, rs, imm
                                String rt = lineArray[1].replaceAll(",", "");
                                String rs = lineArray[2].replaceAll(",", "");
                                Instruction ins = new Instruction(type, null, rs, rt);
                                mNodeList.add(new Node(label, ins, index));
                                break;
                            }
                            case LoadStore: {
                                // rt, imm(rs)
                                String rt = lineArray[1].replaceAll(",", "");
                                String rs = lineArray[2];
                                rs = rs.substring(rs.indexOf("("));
                                rs = rs.replaceAll("[)]", "");
                                rs = rs.replaceAll("[(]", "");
                                Instruction ins = new Instruction(type, null, rs, rt);
                                mNodeList.add(new Node(label, ins, index));
                                break;
                            }
                            case Branch: {
                                // rs, rt, label
                                String rs = lineArray[1].replaceAll(",", "");
                                String rt = lineArray[2].replaceAll(",", "");
                                Instruction ins = new Instruction(type, null, rs, rt);
                                mNodeList.add(new Node(label, ins, index));
                                break;
                            }
                            default:
                                break;
                        }

                    }

                }
            }

            // print nodelist
            for (Node n : mNodeList) {
                System.out.println(n.toString());
            }
        }

    }//GEN-LAST:event_ParseInputActionPerformed

    private void mClearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mClearBtnActionPerformed
        // TODO add your handling code here:
        System.out.println("Clearing everything.");
        mAssemblyInputText.setText("");
        inputString = "";
        outputString = "";
        mOutputText.setText("");
        mAssemblyLines.clear();
    }//GEN-LAST:event_mClearBtnActionPerformed

    private void runBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runBtnActionPerformed
        // TODO add your handling code here:

        int count = findDependencies();
        System.out.println("Dependency SIZE: " + mDependencylist.size() + "\nFIX: " + count);
    }//GEN-LAST:event_runBtnActionPerformed

    private void solveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solveBtnActionPerformed
        // TODO add your handling code here:

       /* while (findDependencies() > 0) {
            solveDependencies();
            
        }*/
       
       for(int i=0; i<3;i++) {
           findDependencies();
           solveDependencies();
       }
    }//GEN-LAST:event_solveBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainUI().setVisible(true);
            }
        });
    }

    public String reduceBlanksToOne(String codeToken) {
        codeToken = codeToken.trim().replaceAll(" +", " ");
        codeToken = codeToken.trim().replaceAll("\\t", "");
        //System.out.print("reduceBlanksToOne:\n" + codeToken);
        return codeToken;
    }

    public void solveDependencies() {

        System.out.println("SOLVING DEPENDENCIES");
        if (mDependencylist.size() > 0) {

            System.out.println("SOLVING DEPENDENCIES SIZE: " + mDependencylist.size());
            boolean control_hazard = false;
            boolean data_hazard_1 = false;
            boolean data_hazard_2 = false;

            // check list
            for (Dependency dep : mDependencylist) {

                if (dep.getHazard().equals(CH)) {
                    System.out.println("CONTROL HAZARD DETECTED!!!!");
                    control_hazard = true;
                } else if (dep.getHazard().equals(DH)) {
                    if (dep.getDistance() == 1) {
                        data_hazard_1 = true;
                    } else {
                        data_hazard_2 = true;
                    }
                }
            }

            if (control_hazard) {
                System.out.println("FIXING CONTROL HAZARD!!!!");
                // fix first control hazard
                Dependency target;
                for (Dependency dep : mDependencylist) {
                    if (dep.getHazard().equals(CH)) {
                        target = dep;
                        int fix_index = target.getFirst().getIndex();

                        ArrayList mNewNodeList = new ArrayList<Node>();

                        for (int i = 0; i < fix_index; i++) {
                            mNewNodeList.add(mNodeList.get(i));
                        }

                        mNewNodeList.add(new Node(null, new Instruction(InstructionType.NOP, "", "", ""), fix_index+1));
                        mNewNodeList.add(new Node(null, new Instruction(InstructionType.NOP, "", "", ""), fix_index + 2));
                        mNewNodeList.add(new Node(null, new Instruction(InstructionType.NOP, "", "", ""), fix_index + 3));

                        for (int i = fix_index; i < mNodeList.size(); i++) {
                            System.out.println("ADDING NEW LIST ["+i+"] : " + mNodeList.get(i).getInstruction().getName());
                            mNewNodeList.add(mNodeList.get(i));
                        }

                        mNodeList = mNewNodeList;

                        for (Node n : mNodeList) {
                            System.out.println(n.toString());
                        }
                        System.out.println(mNodeList.size());
                        // findDependencies();
                        return;
                    }
                }

                return;
            } else if (data_hazard_1) {
                return;
            } else {
                return;
            }

        }
    }

    public int findDependencies() {

        mDependencylist.clear();
        if (mNodeList.size() > 0) {

            System.out.println("CURRENT SIZE: " + mNodeList.size());
            int size = mNodeList.size();
            int temp = 0;
            while (temp < size) {

                Node current = mNodeList.get(temp);

                for (int i = temp + 1; i < mNodeList.size(); i++) {

                    if (i < size) {
                        Node target = mNodeList.get(i);
                        System.out.println("Checking...\n  " + temp + " + " + i);
                        if (target.target(current.current())) {
                           //System.out.println("DEPENDENCY DETECTED Betweeen  " + current.getIndex() + " + " + target.getIndex());
                            // branch or 
                            int distance = target.getIndex() - current.getIndex();
                            if (!current.getInstruction().getType().getSyntax().equals(Branch) && distance < 3) {
                                Dependency dep = new Dependency(current, target, distance, Hazard.DH);
                                System.out.println(current.getIndex() + "-> " +target.getIndex() + " ADDING DH: " + distance);
                                mDependencylist.add(dep);
                            } else {
                                Dependency dep = new Dependency(current, target, distance, Hazard.NONE);
                                mDependencylist.add(dep);
                            }
                        }

                    }
                }
                
                
                      //  System.out.println("SSSSSSSSSSss: " + current.getInstruction().getType().getSyntax().name());
                        if (current.getInstruction().getType().getSyntax().equals(Branch) && !mNodeList.get(current.getIndex()+1).getInstruction().getType().equals(NOP)) {
                            Dependency dep = new Dependency(current, mNodeList.get(mNodeList.indexOf(current) + 1), 1, Hazard.CH);
                            System.out.println("ADDING CH !!!!!!!!!");
                            mDependencylist.add(dep);
                        }

                temp++;
            }
        }

        int depCount = 0;
        for (Dependency dep : mDependencylist) {
            if (dep.getHazard().equals(DH) || dep.getHazard().equals(CH)) {
                depCount++;
            }
        }
        System.out.println("DEP COUNT: " + depCount);
        return depCount;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ParseInput;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea mAssemblyInputText;
    private javax.swing.JButton mClearBtn;
    private javax.swing.JTextArea mOutputText;
    private javax.swing.JLabel outputLabel;
    private javax.swing.JButton runBtn;
    private javax.swing.JButton solveBtn;
    // End of variables declaration//GEN-END:variables
}
