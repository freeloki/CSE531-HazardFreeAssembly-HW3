/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.yavuz.hazard.free.assembly;

import static com.yavuz.hazard.free.assembly.Hazard.CH;
import static com.yavuz.hazard.free.assembly.Hazard.DH;
import static com.yavuz.hazard.free.assembly.InstructionSyntax.ArithLog;
import static com.yavuz.hazard.free.assembly.InstructionSyntax.ArithLogI;
import static com.yavuz.hazard.free.assembly.InstructionSyntax.Branch;
import static com.yavuz.hazard.free.assembly.InstructionSyntax.BranchZ;
import static com.yavuz.hazard.free.assembly.InstructionSyntax.Jump;
import static com.yavuz.hazard.free.assembly.InstructionSyntax.JumpR;
import static com.yavuz.hazard.free.assembly.InstructionSyntax.LoadStore;
import static com.yavuz.hazard.free.assembly.InstructionType.NOP;
import guru.nidi.graphviz.attribute.Color;
import guru.nidi.graphviz.attribute.Label;
import static guru.nidi.graphviz.attribute.Label.Justification.LEFT;
import guru.nidi.graphviz.attribute.LinkAttr;
import guru.nidi.graphviz.attribute.Shape;
import guru.nidi.graphviz.attribute.Style;
import guru.nidi.graphviz.engine.Format;
import guru.nidi.graphviz.engine.Graphviz;
import static guru.nidi.graphviz.model.Factory.graph;
import static guru.nidi.graphviz.model.Factory.node;
import static guru.nidi.graphviz.model.Factory.to;
import guru.nidi.graphviz.model.Graph;
import guru.nidi.graphviz.model.MutableGraph;
import guru.nidi.graphviz.model.Node;
import guru.nidi.graphviz.parse.Parser;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;

/**
 *
 * @author codemania
 */
public class MainUI extends javax.swing.JFrame {

    private String inputString;
    private ArrayList<String> mAssemblyLines = new ArrayList();
    private static ArrayList<NodeIns> mNodeList = new ArrayList();

    private static ArrayList<Dependency> mDependencylist = new ArrayList<>();

    private String outputString;

    private int tryout = 0;

    /**
     * Creates new form MainUI
     */
    public MainUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        mOutputText = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        ParseInput = new javax.swing.JButton();
        runBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        mAssemblyInputText = new javax.swing.JTextArea();
        outputLabel = new javax.swing.JLabel();
        mClearBtn = new javax.swing.JButton();
        solveBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CSE531 - Hazard Free Assembly");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLocation(new java.awt.Point(200, 100));

        mOutputText.setColumns(20);
        mOutputText.setRows(5);
        jScrollPane1.setViewportView(mOutputText);

        jLabel1.setFont(new java.awt.Font("Noto Sans", 1, 12)); // NOI18N
        jLabel1.setText("Copy&Paste Assembly Code Here:");

        ParseInput.setText("Parse Input");
        ParseInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ParseInputActionPerformed(evt);
            }
        });

        runBtn.setText("Find Dependencies");
        runBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runBtnActionPerformed(evt);
            }
        });

        mAssemblyInputText.setColumns(20);
        mAssemblyInputText.setRows(5);
        jScrollPane2.setViewportView(mAssemblyInputText);

        outputLabel.setFont(new java.awt.Font("Noto Sans", 1, 12)); // NOI18N
        outputLabel.setText("Result:");

        mClearBtn.setText("Clear");
        mClearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mClearBtnActionPerformed(evt);
            }
        });

        solveBtn.setText("Solve Dependencies");
        solveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solveBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 476, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mClearBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ParseInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(runBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(solveBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(outputLabel)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 476, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(outputLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(ParseInput, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(runBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(solveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mClearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1))
                .addContainerGap(172, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ParseInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ParseInputActionPerformed
        // TODO add your handling code here:

        StringBuilder parseResult = new StringBuilder("Parse Result:\n");
        if (mAssemblyInputText != null && !mAssemblyInputText.getText().isEmpty()) {

            inputString = mAssemblyInputText.getText();

            String[] mSplitArray = inputString.split("\n");

            for (int i = 0; i < mSplitArray.length; i++) {

                mAssemblyLines.add(reduceBlanksToOne(mSplitArray[i]));
               
                
                String temp = "LINE[" + i + "]: " + reduceBlanksToOne(mSplitArray[i]+"\n");
                System.out.println(temp);
                parseResult.append(temp).append("\n");
            }

            // parse lines.
            for (String line : mAssemblyLines) {

                int index = mAssemblyLines.indexOf(line);

                String[] lineArray = line.split(" ");

                if (lineArray.length > 0) {

                    // check label first!!
                    String label = "";
                    if (lineArray[0].contains(":")) {
                        label = lineArray[0];

                        InstructionType type = InstructionType.getTypeByName(lineArray[1]);
                        // Instruction mInstruction = InstructionType.
                        // -> rd, rs, rt
                        switch (type.getSyntax()) {
                            case ArithLog: {
                                String rd = lineArray[2].replaceAll(",", "");
                                String rs = lineArray[3].replaceAll(",", "");
                                String rt = lineArray[4].replaceAll(",", "");
                                Instruction ins = new Instruction(type, rd, rs, rt);
                                mNodeList.add(new NodeIns(label, ins, index));
                                break;
                            }
                            case ArithLogI: {
                                // rt, rs, imm
                                String rt = lineArray[2].replaceAll(",", "");
                                String rs = lineArray[3].replaceAll(",", "");
                                Instruction ins = new Instruction(type, null, rs, rt);
                                mNodeList.add(new NodeIns(label, ins, index));
                                break;
                            }
                            case LoadStore: {
                                // rt, imm(rs)
                                String rt = lineArray[2].replaceAll(",", "");
                                String rs = lineArray[3];
                                rs = rs.substring(rs.indexOf("("));
                                rs = rs.replaceAll("[)]", "");
                                Instruction ins = new Instruction(type, null, rs, rt);
                                mNodeList.add(new NodeIns(label, ins, index));
                                break;
                            }
                            case Branch: {
                                // rs, rt, label
                                String rs = lineArray[2].replaceAll(",", "");
                                String rt = lineArray[3].replaceAll(",", "");
                                Instruction ins = new Instruction(type, null, rs, rt);
                                mNodeList.add(new NodeIns(label, ins, index));
                                break;
                            }
                             case DivMult: {
                                String rs = lineArray[2].replaceAll(",", "");
                                String rt = lineArray[3];
                                Instruction ins = new Instruction(type, null, rs, rt);
                                mNodeList.add(new NodeIns(label, ins, index));
                            }
                            
                            case Shift: {
                                String rd = lineArray[2].replaceAll(",", "");
                                String rt = lineArray[3];
                                Instruction ins = new Instruction(type, rd, null, rt);
                                mNodeList.add(new NodeIns(label, ins, index));
                            }
                            
                            case ShiftV: {
                                String rd = lineArray[2].replaceAll(",", "");
                                String rt = lineArray[3].replaceAll(",", "");
                                String rs = lineArray[4];
                                Instruction ins = new Instruction(type, rd, rs, rt);
                                mNodeList.add(new NodeIns(label, ins, index));
                            }
                            
                            case JumpR: {
                                String rs = lineArray[2];
                                Instruction ins = new Instruction(type, null, rs, null);
                                mNodeList.add(new NodeIns(label, ins, index));
                            }
                            
                            case MoveFrom: {
                                String rd = lineArray[2];
                                Instruction ins = new Instruction(type, rd, null, null);
                                mNodeList.add(new NodeIns(label, ins, index));
                            }
                            
                            case MoveTo: {
                                String rs = lineArray[2];
                                Instruction ins = new Instruction(type, null, rs, null);
                                mNodeList.add(new NodeIns(label, ins, index));
                            }
                            
                            case LoadI: {
                                String rt = lineArray[2].replaceAll(",", "");
                                Instruction ins = new Instruction(type, null, null, rt);
                                mNodeList.add(new NodeIns(label, ins, index));
                            }
                            
                            case BranchZ: {
                                String rs = lineArray[2].replaceAll(",", "");
                                Instruction ins = new Instruction(type, null, rs, null);
                                mNodeList.add(new NodeIns(label, ins, index));
                            }
                            
                            case Jump: {
                                Instruction ins = new Instruction(type, null, null, null);
                                mNodeList.add(new NodeIns(label, ins, index));
                            }
                            
                            case Trap: {
                                Instruction ins = new Instruction(type, null, null, null);
                                mNodeList.add(new NodeIns(label, ins, index));
                            }
                            default:
                                break;
                        }

                    } else {
                        InstructionType type = InstructionType.getTypeByName(lineArray[0]);
                        // Instruction mInstruction = InstructionType.
                        // -> rd, rs, rt
                        switch (type.getSyntax()) {
                            case ArithLog: {
                                String rd = lineArray[1].replaceAll(",", "");
                                String rs = lineArray[2].replaceAll(",", "");
                                String rt = lineArray[3].replaceAll(",", "");
                                Instruction ins = new Instruction(type, rd, rs, rt);
                                mNodeList.add(new NodeIns(label, ins, index));
                                break;
                            }
                            case ArithLogI: {
                                // rt, rs, imm
                                String rt = lineArray[1].replaceAll(",", "");
                                String rs = lineArray[2].replaceAll(",", "");
                                Instruction ins = new Instruction(type, null, rs, rt);
                                mNodeList.add(new NodeIns(label, ins, index));
                                break;
                            }
                            case LoadStore: {
                                // rt, imm(rs)
                                String rt = lineArray[1].replaceAll(",", "");
                                String rs = lineArray[2];
                                rs = rs.substring(rs.indexOf("("));
                                rs = rs.replaceAll("[)]", "");
                                rs = rs.replaceAll("[(]", "");
                                Instruction ins = new Instruction(type, null, rs, rt);
                                mNodeList.add(new NodeIns(label, ins, index));
                                break;
                            }
                            case Branch: {
                                // rs, rt, label
                                String rs = lineArray[1].replaceAll(",", "");
                                String rt = lineArray[2].replaceAll(",", "");
                                Instruction ins = new Instruction(type, null, rs, rt);
                                mNodeList.add(new NodeIns(label, ins, index));
                                break;
                            }
                            // copy then
                            case DivMult: {
                                String rs = lineArray[1].replaceAll(",", "");
                                String rt = lineArray[2];
                                Instruction ins = new Instruction(type, null, rs, rt);
                                mNodeList.add(new NodeIns(label, ins, index));
                            }
                            
                            case Shift: {
                                String rd = lineArray[1].replaceAll(",", "");
                                String rt = lineArray[2];
                                Instruction ins = new Instruction(type, rd, null, rt);
                                mNodeList.add(new NodeIns(label, ins, index));
                            }
                            
                            case ShiftV: {
                                String rd = lineArray[1].replaceAll(",", "");
                                String rt = lineArray[2].replaceAll(",", "");
                                String rs = lineArray[3];
                                Instruction ins = new Instruction(type, rd, rs, rt);
                                mNodeList.add(new NodeIns(label, ins, index));
                            }
                            
                            case JumpR: {
                                String rs = lineArray[1];
                                Instruction ins = new Instruction(type, null, rs, null);
                                mNodeList.add(new NodeIns(label, ins, index));
                            }
                            
                            case MoveFrom: {
                                String rd = lineArray[1];
                                Instruction ins = new Instruction(type, rd, null, null);
                                mNodeList.add(new NodeIns(label, ins, index));
                            }
                            
                            case MoveTo: {
                                String rs = lineArray[1];
                                Instruction ins = new Instruction(type, null, rs, null);
                                mNodeList.add(new NodeIns(label, ins, index));
                            }
                            
                            case LoadI: {
                                String rt = lineArray[1].replaceAll(",", "");
                                Instruction ins = new Instruction(type, null, null, rt);
                                mNodeList.add(new NodeIns(label, ins, index));
                            }
                            
                            case BranchZ: {
                                String rs = lineArray[1].replaceAll(",", "");
                                Instruction ins = new Instruction(type, null, rs, null);
                                mNodeList.add(new NodeIns(label, ins, index));
                            }
                            
                            case Jump: {
                                Instruction ins = new Instruction(type, null, null, null);
                                mNodeList.add(new NodeIns(label, ins, index));
                            }
                            
                            case Trap: {
                                Instruction ins = new Instruction(type, null, null, null);
                                mNodeList.add(new NodeIns(label, ins, index));
                            }
                            default:
                                break;
                        }

                    }

                }
            }

            // print nodelist
            /* for (Node n : mNodeList) {
                System.out.println(n.toString());
            }*/
            
            mOutputText.setText(parseResult.toString());
        }

    }//GEN-LAST:event_ParseInputActionPerformed

    private void mClearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mClearBtnActionPerformed
        // TODO add your handling code here:
        System.out.println("Clearing everything.");
        mAssemblyInputText.setText("");
        inputString = "";
        outputString = "";
        mOutputText.setText("");
        mAssemblyLines.clear();
        mNodeList.clear();
        mDependencylist.clear();
    }//GEN-LAST:event_mClearBtnActionPerformed

    private void runBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runBtnActionPerformed
        
        printDepGraph();
    }//GEN-LAST:event_runBtnActionPerformed

    private void solveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solveBtnActionPerformed
        // TODO add your handling code here:

        while (findDependencies() > 0) {
            solveDependencies();
        }
        
        StringBuilder result = new StringBuilder("RESULT:\n");
        for (NodeIns n : mNodeList) {
            System.out.println(n.getInstruction().getName());
            String temp = n.getIndex() + " - " + n.getInstruction().getName() + "\n";
            result.append(temp);
        }

        mOutputText.setText(result.toString());
        /*for (int i = 0; i < 4; i++) {
            findDependencies();
            solveDependencies();
        }*/
         showImage();
    }//GEN-LAST:event_solveBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainUI().setVisible(true);
            }
        });
    }

    public String reduceBlanksToOne(String codeToken) {
        codeToken = codeToken.trim().replaceAll(" +", " ");
        codeToken = codeToken.trim().replaceAll("\\t", "");
        //System.out.print("reduceBlanksToOne:\n" + codeToken);
        return codeToken;
    }

    public void solveDependencies() {

        System.out.println("SOLVING DEPENDENCIES " + tryout);
        tryout++;

        if (mDependencylist.size() > 0) {

            System.out.println("SOLVING DEPENDENCIES SIZE: " + mDependencylist.size());
            boolean control_hazard = false;
            boolean data_hazard_1 = false;
            boolean data_hazard_2 = false;

            // check list
            for (Dependency dep : mDependencylist) {

                if (dep.getHazard().equals(CH)) {
                    System.out.println("CONTROL HAZARD DETECTED!!!!" + dep.getFirst().getIndex() + " -> " + dep.getSecond().getIndex());
                    control_hazard = true;
                } else if (dep.getHazard().equals(DH)) {
                    if (dep.getDistance() == 1) {
                        data_hazard_1 = true;
                    } else {
                        data_hazard_2 = true;
                    }
                }
            }

            if (control_hazard) {
                System.out.println("FIXING CONTROL HAZARD!!!!");
                // fix first control hazard
                Dependency target;
                for (Dependency dep : mDependencylist) {
                    if (dep.getHazard().equals(CH)) {
                        target = dep;
                        int fix_index = target.getFirst().getIndex();

                        ArrayList<NodeIns> mNewNodeList = new ArrayList();

                        for (int i = 0; i <= fix_index; i++) {
                            NodeIns temp = mNodeList.get(i);
                            temp.setIndex(i);
                            mNewNodeList.add(temp);
                        }

                        mNewNodeList.add(new NodeIns(null, new Instruction(InstructionType.NOP, "", "", ""), fix_index + 1));
                        mNewNodeList.add(new NodeIns(null, new Instruction(InstructionType.NOP, "", "", ""), fix_index + 2));
                        mNewNodeList.add(new NodeIns(null, new Instruction(InstructionType.NOP, "", "", ""), fix_index + 3));

                        for (int i = fix_index + 1; i < mNodeList.size(); i++) {
                            // System.out.println("ADDING NEW LIST [" + i + "] : " + mNodeList.get(i).getInstruction().getName());
                            NodeIns temp = mNodeList.get(i);
                            temp.setIndex(i + 3);
                            mNewNodeList.add(temp);
                        }

                        for (NodeIns n : mNewNodeList) {
                            System.out.println(n.getInstruction().getName());
                            System.out.println(n.getIndex());
                        }

                        mNodeList = mNewNodeList;

                        for (NodeIns n : mNodeList) {
                            //System.out.println(n.toString());
                        }
                        System.out.println(mNodeList.size());
                        // findDependencies();
                        mDependencylist.clear();
                        return;
                    }
                }

            } else if (data_hazard_1) {

                // fix data hazard 1
                Dependency target;
                for (Dependency dep : mDependencylist) {
                    if (dep.getHazard().equals(DH) && dep.getDistance() == 1) {
                        target = dep;
                        int fix_index = target.getFirst().getIndex();
                        System.out.println("FIXING DATA HAZARD_1!!!!" + fix_index + " -> " + (fix_index + 1));

                        ArrayList<NodeIns> mNewNodeList = new ArrayList();

                        for (int i = 0; i <= fix_index; i++) {
                            NodeIns temp = mNodeList.get(i);
                            temp.setIndex(i);
                            mNewNodeList.add(temp);
                        }

                        mNewNodeList.add(new NodeIns(null, new Instruction(InstructionType.NOP, "", "", ""), fix_index + 1));
                        mNewNodeList.add(new NodeIns(null, new Instruction(InstructionType.NOP, "", "", ""), fix_index + 2));

                        for (int i = fix_index + 1; i < mNodeList.size(); i++) {
                            // System.out.println("ADDING NEW LIST [" + i + "] : " + mNodeList.get(i).getInstruction().getName());
                            NodeIns temp = mNodeList.get(i);
                            temp.setIndex(i + 2);
                            mNewNodeList.add(temp);
                        }

                        for (NodeIns n : mNewNodeList) {
                            System.out.println(n.getInstruction().getName());
                            System.out.println(n.getIndex());
                        }
                        mNodeList = mNewNodeList;

                        System.out.println(mNodeList.size());
                        // findDependencies();
                        mDependencylist.clear();
                        return;
                    }
                }

            } else if (data_hazard_2) {

                // fix data hazard 2
                Dependency target;
                for (Dependency dep : mDependencylist) {
                    if (dep.getHazard().equals(DH) && dep.getDistance() == 2) {
                        target = dep;
                        int fix_index = target.getFirst().getIndex();
                        System.out.println("FIXING DATA HAZARD_2!!!!" + fix_index + " -> " + (fix_index + 1));
                        ArrayList<NodeIns> mNewNodeList = new ArrayList();

                        for (int i = 0; i <= fix_index; i++) {
                            NodeIns temp = mNodeList.get(i);
                            temp.setIndex(i);
                            mNewNodeList.add(temp);
                        }

                        mNewNodeList.add(new NodeIns(null, new Instruction(InstructionType.NOP, "", "", ""), fix_index + 1));

                        for (int i = fix_index + 1; i < mNodeList.size(); i++) {
                            // System.out.println("ADDING NEW LIST [" + i + "] : " + mNodeList.get(i).getInstruction().getName());
                            NodeIns temp = mNodeList.get(i);
                            temp.setIndex(i + 1);
                            mNewNodeList.add(temp);
                        }

                        mNodeList = mNewNodeList;

                        System.out.println(mNodeList.size());
                        // findDependencies();
                        mDependencylist.clear();
                        return;
                    }
                }

            }

        }

        for (NodeIns n : mNodeList) {
            System.out.println(n.getInstruction().getName());
        }
    }

    public int findDependencies() {

        mDependencylist.clear();
        if (mNodeList.size() > 0) {

            System.out.println("CURRENT SIZE: " + mNodeList.size());
            int size = mNodeList.size();
            int temp = 0;
            while (temp < size) {

                NodeIns current = mNodeList.get(temp);

                for (int i = temp + 1; i < mNodeList.size(); i++) {

                    if (i < size) {
                        NodeIns target = mNodeList.get(i);
                        //System.out.println("Checking...\n  " + current.getInstruction().getName() + "  AND  " +  target.getInstruction().getName());
                        if (target.target(current.current())) {
                            //
                            // branch or 
                            int distance = target.getIndex() - current.getIndex();
                            if ((!current.getInstruction().getType().getSyntax().equals(Branch)
                                    || !current.getInstruction().getType().getSyntax().equals(BranchZ)
                                    ||!current.getInstruction().getType().getSyntax().equals(Jump)
                                    || !current.getInstruction().getType().getSyntax().equals(JumpR)) && distance < 3) {
                                Dependency dep = new Dependency(current, target, distance, Hazard.DH);
                                System.out.println(current.getIndex() + "-> " + target.getIndex() + " ADDING DH: " + distance);
                                System.out.println(current.getInstruction().getName() + "-> " + target.getInstruction().getName() + " ADDING DH: " + distance);
                                mDependencylist.add(dep);
                            } else {
                                Dependency dep = new Dependency(current, target, distance, Hazard.NONE);
                                mDependencylist.add(dep);
                            }
                        }

                    }
                }

                //TODO: Check last branch instruction.  //  System.out.println("SSSSSSSSSSss: " + current.getInstruction().getType().getSyntax().name());
                // System.out.println("ADDING CH !!!!!!!!!" + temp + "name:" + current.getInstruction().getName());
                if (!(temp == (mNodeList.size() - 1)) && (current.getInstruction().getType().getSyntax().name().equals(Branch.name())
                        || current.getInstruction().getType().getSyntax().name().equals(BranchZ.name())
                        || current.getInstruction().getType().getSyntax().name().equals(Jump.name())
                        || current.getInstruction().getType().getSyntax().name().equals(JumpR.name())
                        )) {
                    System.out.println("CURRENT: " + current.getInstruction().getType().getName() + "AFTER: " + mNodeList.get((mNodeList.indexOf(current) + 1)).getInstruction().getType().getName());
                    if ((current.getInstruction().getType().getSyntax().equals(Branch)
                            ||current.getInstruction().getType().getSyntax().equals(BranchZ)
                            ||current.getInstruction().getType().getSyntax().equals(Jump)
                            ||current.getInstruction().getType().getSyntax().equals(JumpR)) && !(mNodeList.get((mNodeList.indexOf(current) + 1)).getInstruction().getType().equals(NOP))) {
                        Dependency dep = new Dependency(current, mNodeList.get(mNodeList.indexOf(current) + 1), 1, Hazard.CH);
                        System.out.println(current.getIndex() + " -> " + (current.getIndex() + 1) + " ADDING CH !!!!!!!!!");
                        mDependencylist.add(dep);
                    }
                }

                // System.out.println("CURRENTTTTTTTTTTTTTTTT: " + current.getIndex());
                temp++;
            }
        }

        int depCount = 0;
        for (Dependency dep : mDependencylist) {
            if (dep.getHazard().equals(DH) || dep.getHazard().equals(CH)) {
                depCount++;
            }
        }
        System.out.println("DEP COUNT: " + depCount);
        return depCount;
    }
    
    
    private void printDepGraph() {
        
            // TODO add your handling code here:
            
            int count = findDependencies();
            System.out.println("Dependency SIZE: " + mDependencylist.size() + "\nFIX: " + count);
            
            
            ArrayList<Node> mGraphNodes = new ArrayList<>();
            for(NodeIns nodeins:mNodeList) {
                
                mGraphNodes.add(node(String.valueOf(nodeins.getIndex())));
            }
            
           for(NodeIns n: mNodeList) {
               System.out.println("GRAPH:  " + getGraphNodeById(mGraphNodes, String.valueOf(n.getIndex())).name().toString());
           }
          
           StringBuilder digraphStrBuilder = new StringBuilder();
           
           digraphStrBuilder.append("digraph {\n");
             //MutableGraph g = 
            
            for(Dependency d : mDependencylist) {
                
                NodeIns cur = d.getFirst();
                NodeIns tar = d.getSecond();
                String label = String.valueOf(d.getDistance());
                
                String curIndex = String.valueOf(cur.getIndex());
                String tarIndex = String.valueOf(tar.getIndex());
               // Node current = getGraphNodeById(mGraphNodes, String.valueOf(cur.getIndex()));
               // Node target = getGraphNodeById(mGraphNodes, String.valueOf(tar.getIndex()));
                
               String depLine="";
                //a -> b[label="0.2",weight="0.2"];
                switch (d.getHazard()) {
                    case CH:
                        depLine = curIndex + " -> " + tarIndex + "[label=\"CH("+label+")\",weight=\"CH("+label+")\",color=red,penwidth=3.0]\n";
                        break;
                    case DH:
                        depLine = curIndex + " -> " + tarIndex + "[label=\"DH("+label+")\",weight=\"DH("+label+")\"color=blue,penwidth=3.0]\n";
                        break;
                    default:
                        depLine = curIndex + " -> " + tarIndex + "[label=\""+label+"\",weight=\""+label+"\"color=black,penwidth=3.0]\n";
                        break;
                }
                digraphStrBuilder.append(depLine);
               
            }
            
            digraphStrBuilder.append("}");
            
            String drawer = digraphStrBuilder.toString();
            
            
        try {
            MutableGraph g  = Parser.read(drawer);
            Graphviz.fromGraph(g).width(500).render(Format.PNG).toFile(new File("example/awesome.png"));
        } catch (IOException ex) {
            Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
        }
            
             System.out.println("DRAWER:\n" + drawer);
             mOutputText.setText(drawer.toString());

       
    }
    
    private Node getGraphNodeById(ArrayList<Node> mGraphNodes, String id) {
        for(Node n : mGraphNodes) {
            if(n.name().toString().equals(id)) {
                return n;
            }
        }
        return null;
    }
    
    private void showImage(){
           JFrame f = new JFrame(); //creates jframe f
           

        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize(); //this is your screen size

        f.setUndecorated(true); //removes the surrounding border

        ImageIcon image = new ImageIcon("example/awesome.png"); //imports the image

        JLabel lbl = new JLabel(image); //puts the image into a jlabel
        

        f.getContentPane().add(lbl); //puts label inside the jframe

        f.setSize(image.getIconWidth(), image.getIconHeight()); //gets h and w of image and sets jframe to the size

        int x = (screenSize.width - f.getSize().width)/2; //These two lines are the dimensions
        int y = (screenSize.height - f.getSize().height)/2;//of the center of the screen

        f.setLocation(x, y); //sets the location of the jframe
        f.setResizable(true);
       f.setTitle("Dependency Graph");
       f.setType(Type.NORMAL);
       
       f.addMouseListener(new MouseListener() {
               @Override
               public void mouseClicked(MouseEvent e) {
                  // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                  f.setVisible(false);
               }

               @Override
               public void mousePressed(MouseEvent e) {
                  // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }

               @Override
               public void mouseReleased(MouseEvent e) {
                  // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }

               @Override
               public void mouseEntered(MouseEvent e) {
                   //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }

               @Override
               public void mouseExited(MouseEvent e) {
                 //  throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }
       });
       
       //f.setEnabled(true);
        
        f.setVisible(true); //makes the jframe visible
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ParseInput;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea mAssemblyInputText;
    private javax.swing.JButton mClearBtn;
    private javax.swing.JTextArea mOutputText;
    private javax.swing.JLabel outputLabel;
    private javax.swing.JButton runBtn;
    private javax.swing.JButton solveBtn;
    // End of variables declaration//GEN-END:variables
}
